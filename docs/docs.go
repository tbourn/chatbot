// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Thomas Bournaveas",
            "url": "https://thomasbournaveas.com",
            "email": "thomas.bournaveas@gmail.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/chats": {
            "get": {
                "description": "Returns a page of the user's chats. Supports weak ETag via If-None-Match and may return 304.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chats"
                ],
                "summary": "List chats (paginated)",
                "operationId": "listChats",
                "parameters": [
                    {
                        "type": "string",
                        "example": "user123",
                        "description": "User ID (demo header)",
                        "name": "X-User-ID",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "example": "W/\\\"abc123\\\"",
                        "description": "Return 304 if ETag matches",
                        "name": "If-None-Match",
                        "in": "header"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "Items per page",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_http_handlers.ListChatsResponse"
                        },
                        "headers": {
                            "Cache-Control": {
                                "type": "string",
                                "description": "Caching directives (if set)"
                            },
                            "ETag": {
                                "type": "string",
                                "description": "Weak ETag for current result"
                            }
                        }
                    },
                    "304": {
                        "description": "Not Modified",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/internal_http_handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/internal_http_handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a chat for the current user and returns the chat resource.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chats"
                ],
                "summary": "Create a new chat",
                "operationId": "createChat",
                "parameters": [
                    {
                        "description": "Create chat payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_http_handlers.CreateChatRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/github_com_tbourn_go-chat-backend_internal_domain.Chat"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/internal_http_handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/internal_http_handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/chats/{id}/messages": {
            "get": {
                "description": "Returns a paginated list of messages for the given chat.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messages"
                ],
                "summary": "List messages in a chat",
                "operationId": "listMessages",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Chat ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "Items per page",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_http_handlers.ListMessagesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/internal_http_handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Chat not found",
                        "schema": {
                            "$ref": "#/definitions/internal_http_handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/internal_http_handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Appends a user message to the chat and generates an assistant reply.\nSupports idempotency via the Idempotency-Key header (same key â†’ same result).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messages"
                ],
                "summary": "Send a message and get assistant reply",
                "operationId": "postMessage",
                "parameters": [
                    {
                        "type": "string",
                        "example": "user123",
                        "description": "User ID that owns the chat",
                        "name": "X-User-ID",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "7a8d9f4c-1b2a-4c3d-8e9f-0123456789ab",
                        "description": "Idempotency key for safe retries (UUID recommended)",
                        "name": "Idempotency-Key",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Chat ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User message payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_http_handlers.PostMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Assistant reply",
                        "schema": {
                            "$ref": "#/definitions/internal_http_handlers.PostMessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/internal_http_handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Chat not found",
                        "schema": {
                            "$ref": "#/definitions/internal_http_handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/internal_http_handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/chats/{id}/title": {
            "put": {
                "description": "Updates the title of a chat owned by the current user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chats"
                ],
                "summary": "Rename a chat",
                "operationId": "updateChatTitle",
                "parameters": [
                    {
                        "type": "string",
                        "example": "user123",
                        "description": "User ID (demo header)",
                        "name": "X-User-ID",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "141add05-4415-4938-b5a1-17e0d3171aff",
                        "description": "Chat ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New title",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_http_handlers.UpdateChatTitleRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/internal_http_handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Chat not found",
                        "schema": {
                            "$ref": "#/definitions/internal_http_handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/internal_http_handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/messages/{id}/feedback": {
            "post": {
                "description": "Records positive (+1) or negative (-1) feedback for an assistant message.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feedback"
                ],
                "summary": "Leave feedback on a message",
                "operationId": "leaveFeedback",
                "parameters": [
                    {
                        "type": "string",
                        "example": "user123",
                        "description": "User ID (demo header)",
                        "name": "X-User-ID",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "fa4dfbe0-c3bf-47bd-b32f-d7de221cf43b",
                        "description": "Message ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Feedback payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_http_handlers.LeaveFeedbackRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/internal_http_handlers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Not allowed to leave feedback",
                        "schema": {
                            "$ref": "#/definitions/internal_http_handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Message not found",
                        "schema": {
                            "$ref": "#/definitions/internal_http_handlers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Feedback already exists",
                        "schema": {
                            "$ref": "#/definitions/internal_http_handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/internal_http_handlers.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "github_com_tbourn_go-chat-backend_internal_domain.Chat": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "github_com_tbourn_go-chat-backend_internal_domain.Message": {
            "type": "object",
            "properties": {
                "chat_id": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "score": {
                    "description": "only for assistant messages",
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "internal_http_handlers.CreateChatRequest": {
            "type": "object",
            "properties": {
                "title": {
                    "description": "Title optionally sets the chat title; a default is used when empty.",
                    "type": "string",
                    "example": "Customer insights UK"
                }
            }
        },
        "internal_http_handlers.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Stable, machine-readable code (see errors.go constants)",
                    "type": "string",
                    "example": "not_found"
                },
                "message": {
                    "description": "Human-readable message (safe to show to users)",
                    "type": "string",
                    "example": "resource not found"
                },
                "request_id": {
                    "description": "Correlates server logs and client errors",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                }
            }
        },
        "internal_http_handlers.LeaveFeedbackRequest": {
            "type": "object",
            "required": [
                "value"
            ],
            "properties": {
                "comment": {
                    "type": "string",
                    "example": "Looks good"
                },
                "value": {
                    "description": "Value is the feedback signal: +1 (positive) or -1 (negative).",
                    "type": "integer",
                    "enum": [
                        -1,
                        1
                    ],
                    "example": 1
                }
            }
        },
        "internal_http_handlers.ListChatsResponse": {
            "type": "object",
            "properties": {
                "chats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_tbourn_go-chat-backend_internal_domain.Chat"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/internal_http_handlers.Pagination"
                }
            }
        },
        "internal_http_handlers.ListMessagesResponse": {
            "type": "object",
            "properties": {
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_tbourn_go-chat-backend_internal_domain.Message"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/internal_http_handlers.Pagination"
                }
            }
        },
        "internal_http_handlers.Pagination": {
            "type": "object",
            "properties": {
                "has_next": {
                    "type": "boolean"
                },
                "page": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "internal_http_handlers.PostMessageRequest": {
            "type": "object",
            "required": [
                "content"
            ],
            "properties": {
                "content": {
                    "description": "Content is the user prompt. It must be non-empty.",
                    "type": "string",
                    "minLength": 1,
                    "example": "What percentage of Gen Z in Nashville discover new brands through podcasts?"
                }
            }
        },
        "internal_http_handlers.PostMessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message is the assistant reply created as a result of the request.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_tbourn_go-chat-backend_internal_domain.Message"
                        }
                    ]
                }
            }
        },
        "internal_http_handlers.UpdateChatTitleRequest": {
            "type": "object",
            "required": [
                "title"
            ],
            "properties": {
                "title": {
                    "description": "Title is the new chat name (1â€“255 chars).",
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "example": "Penetration - 18â€“24 UK"
                }
            }
        }
    },
    "tags": [
        {
            "description": "Manage chat sessions and messages",
            "name": "Chats"
        },
        {
            "description": "Submit feedback on assistant messages",
            "name": "Feedback"
        },
        {
            "description": "Send messages and get assistant replies",
            "name": "Messages"
        }
    ],
    "externalDocs": {
        "description": "Project documentation",
        "url": "https://github.com/tbourn/go-chat-backend"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{"http"},
	Title:            "Go Chat Backend API",
	Description:      "Public REST API for chat-based Q&A over market research data.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
